Supplier_name_model_rf <-
train( `Supplier name` ~ `Product type` + Price + Availability + `Number of products sold` + `Revenue generated` + `Customer demographics` +
`Stock levels` + `Lead times` + `Order quantities` + `Shipping times` + `Shipping carriers` + `Shipping costs`, data = supply_chain_train, method = "rf",
metric = "Accuracy", trControl = train_control)
## 1.c. Split the dataset ----
# Define a 75:25 train:test data split of the dataset.
# That is, 75% of the original data will be used to train the model and
# 25% of the original data will be used to test the model.
train_index <- createDataPartition(supply_chain$`Supplier name`,
p = 0.75,
list = FALSE)
supply_chain_train <- supply_chain[train_index, ]
supply_chain_test <- supply_chain[-train_index, ]
## 1.d. Train the Model ----
# We apply the 5-fold cross validation resampling method
train_control <- trainControl(method = "cv", number = 5)
set.seed(7)
Supplier_name_model_rf <-
train( `Supplier name` ~ `Product type` + Price + Availability + `Number of products sold` + `Revenue generated` + `Customer demographics` +
`Stock levels` + `Lead times` + `Order quantities` + `Shipping times` + `Shipping carriers` + `Shipping costs`, data = supply_chain_train, method = "rf",
metric = "Accuracy", trControl = train_control)
## 1.e. Display the Model's Performance ----
print(Supplier_name_model_rf)
# The Confusion Matrix is a type of matrix which is used to visualize the
# predicted values against the actual Values.
levels(Supplier_name_model_rf)
levels(supply_chain_test$`Supplier name`)
# Align levels between datasets
predicted_levels <- levels(Supplier_name_model_rf)
supply_chain_test$`Supplier name` <- factor(supply_chain_test$`Supplier name`, levels = predicted_levels)
levels(supply_chain_test$`Supplier name`)
# The Confusion Matrix is a type of matrix which is used to visualize the
# predicted values against the actual Values.
levels(Supplier_name_model_rf)
predictions <- predict(Supplier_name_model_rf, supply_chain_test[, 1:13])
confusion_matrix <-
caret::confusionMatrix(predictions,
supply_chain_test[, 1:14]$`Supplier name`)
print(confusion_matrix)
## 2.a. Load the dataset ----
library(readr)
supply_chain <- read_csv(
"data/supply_chain.csv")
summary(supply_chain)
supply_chain_no_na <- na.omit(supply_chain)
# For reproducibility; by ensuring that you end up with the same
# "random" samples
set.seed(7)
# We apply simple random sampling using the base::sample function to get
# 10 samples
train_index <- sample(1:dim(supply_chain)[1], 10) # nolint: seq_linter.
supply_chain_train <- supply_chain[train_index, ]
supply_chain_test <- supply_chain[-train_index, ]
## 2.c. Train the Model ----
# We apply bootstrapping with 1,000 repetitions
train_control <- trainControl(method = "boot", number = 1000)
# We then train a linear regression model to predict the value of Employed
# (the number of people that will be employed given the independent variables).
supply_chain_model_lm <-
train(`Supplier name` ~ ., data = supply_chain_train,
na.action = na.omit, method = "lm", metric = "RMSE",
trControl = train_control)
# We then train a linear regression model to predict the value of Employed
# (the number of people that will be employed given the independent variables).
supply_chain_model_lm <-
train(`Supplier name` ~ ., data = supply_chain_train,
na.action = na.omit, method = "rf", metric = "RMSE",
trControl = train_control)
# We then train a linear regression model to predict the value of Employed
# (the number of people that will be employed given the independent variables).
supply_chain_model_lm <-
train(`Supplier name` ~ ., data = supply_chain_train,
na.action = na.omit, method = "rf", metric = "Accuracy",
trControl = train_control)
### Option 2: Compute the metric yourself using the test dataset ----
predictions <- predict(supply_chain_model_rf, supply_chain_test[, 1:24])
# We then train a linear regression model to predict the value of Employed
# (the number of people that will be employed given the independent variables).
supply_chain_model_rf <-
train(`Supplier name` ~ ., data = supply_chain_train,
na.action = na.omit, method = "rf", metric = "Accuracy",
trControl = train_control)
print(supply_chain_model_rf)
### Option 2: Compute the metric yourself using the test dataset ----
predictions <- predict(supply_chain_model_rf, supply_chain_test[, 1:24])
# We then train a linear regression model to predict the value of Employed
# (the number of people that will be employed given the independent variables).
supply_chain_model_rf <-
train(`Supplier name` ~ `Product type` + Price + Availability + `Number of products sold` + `Revenue generated` + `Customer demographics` +
`Stock levels` + `Lead times` + `Order quantities` + `Shipping times` + `Shipping carriers` + `Shipping costs`, data = supply_chain_train, data = supply_chain_train,
na.action = na.omit, method = "rf", metric = "Accuracy",
trControl = train_control)
print(supply_chain_model_rf)
### Option 2: Compute the metric yourself using the test dataset ----
predictions <- predict(supply_chain_model_rf, supply_chain_test[, 1:13])
### Option 2: Compute the metric yourself using the test dataset ----
predictions <- predict(supply_chain_model_rf, supply_chain_test[, 1:14])
# We then train a linear regression model to predict the value of Employed
# (the number of people that will be employed given the independent variables).
supply_chain_model_rf <-
train(`Supplier name` ~ `Product type` + Price + Availability + `Number of products sold` + `Revenue generated` + `Customer demographics` +
`Stock levels` + `Lead times` + `Order quantities` + `Shipping times` + `Shipping carriers` + `Shipping costs`, data = supply_chain_train,
na.action = na.omit, method = "rf", metric = "Accuracy",
trControl = train_control)
print(supply_chain_model_rf)
### Option 2: Compute the metric yourself using the test dataset ----
predictions <- predict(supply_chain_model_rf, supply_chain_test[, 1:13])
# These are the 6 values for employment that the model has predicted:
print(predictions)
#### RMSE ----
rmse <- sqrt(mean((supply_chain_test$`Supplier name` - predictions)^2))
# We then train a linear regression model to predict the value of Employed
# (the number of people that will be employed given the independent variables).
supply_chain_model_rf <-
train(`Lead time` ~ `Product type` + Price + Availability + `Number of products sold` + `Revenue generated` + `Customer demographics` + `Supplier name` + `Location`
`Stock levels` + `Lead times` + `Order quantities` + `Shipping times` + `Shipping carriers` + `Shipping costs`, data = supply_chain_train,
# We then train a linear regression model to predict the value of Employed
# (the number of people that will be employed given the independent variables).
supply_chain_model_rf <-
train(`Lead time` ~ `Product type` + Price + Availability + `Number of products sold` + `Revenue generated` + `Customer demographics` + `Supplier name` + `Location`+
`Stock levels` + `Lead times` + `Order quantities` + `Shipping times` + `Shipping carriers` + `Shipping costs`, data = supply_chain_train,
na.action = na.omit, method = "rf", metric = "Accuracy",
trControl = train_control)
# We then train a linear regression model to predict the value of Employed
# (the number of people that will be employed given the independent variables).
supply_chain_model_rf <-
train(`Lead time` ~ `Product type` + Price + Availability + `Number of products sold` + `Revenue generated` + `Customer demographics` + `Supplier name` + `Location`+
`Stock levels` + `Lead times` + `Order quantities` + `Shipping times` + `Shipping carriers` + `Shipping costs`, data = supply_chain_train,
na.action = na.omit, method = "rf", metric = "RMSE",
trControl = train_control)
print(supply_chain_model_rf)
### Option 2: Compute the metric yourself using the test dataset ----
predictions <- predict(supply_chain_model_rf, supply_chain_test[, 1:15])
# These are the 6 values that the model has predicted:
print(predictions)
#### RMSE ----
rmse <- sqrt(mean((supply_chain_test$`Lead time` - predictions)^2))
print(paste("RMSE =", rmse))
#### SSR ----
# SSR is the sum of squared residuals (the sum of squared differences
# between observed and predicted values)
ssr <- sum((supply_chain_test$`Lead time` - predictions)^2)
print(paste("SSR =", ssr))
#### SST ----
# SST is the total sum of squares (the sum of squared differences
# between observed values and their mean)
sst <- sum((supply_chain_test$`Lead time` - mean(supply_chain_test$`Lead time`))^2)
print(paste("SST =", sst))
#### R Squared ----
# We then use SSR and SST to compute the value of R squared
r_squared <- 1 - (ssr / sst)
print(paste("R Squared =", r_squared))
# MAE is expressed in the same units as the target variable, making it easy to
# interpret. For example, if you are predicting the amount paid in rent,
# and the MAE is KES. 10,000, it means, on average, your model's predictions
# are off by about KES. 10,000.
absolute_errors <- abs(predictions - supply_chain_test$`Lead time`)
mae <- mean(absolute_errors)
print(paste("MAE =", mae))
## MASS ----
if (require("MASS")) {
require("MASS")
} else {
install.packages("MASS", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
## glmnet ----
if (require("glmnet")) {
require("glmnet")
} else {
install.packages("glmnet", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
## stats ----
if (require("stats")) {
require("stats")
} else {
install.packages("stats", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
## kernlab ----
if (require("kernlab")) {
require("kernlab")
} else {
install.packages("kernlab", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
## rpart ----
if (require("rpart")) {
require("rpart")
} else {
install.packages("rpart", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
## pROC ----
if (require("pROC")) {
require("pROC")
} else {
install.packages("pROC", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
# A. Linear Algorithms ----
## 1. Linear Regression ----
#### Load and split the dataset ----
data("supply_chain")
# A. Linear Algorithms ----
## 1. Linear Regression ----
#### Load and split the dataset ----
library(readr)
supply_chain <- read_csv(
"data/supply_chain.csv")
# Define an 80:20 train:test data split of the dataset.
train_index <- createDataPartition(supply_chain$`Costs`,
p = 0.8,
list = FALSE)
supply_chain_train <- supply_chain[train_index, ]
supply_chain_test <- supply_chain[-train_index, ]
#### Train the model ----
supply_chain_model_lm <- lm(Costs ~ `Supplier name`+`Location`, supply_chain_train)
#### Display the model's details ----
print(supply_chain_model_lm)
#### Make predictions ----
predictions <- predict(supply_chain_model_lm, supply_chain_test[, c(14,15)])
#### Display the model's evaluation metrics ----
##### RMSE ----
rmse <- sqrt(mean((supply_chain_test$Costs - predictions)^2))
print(paste("RMSE =", sprintf(rmse, fmt = "%#.4f")))
##### SSR ----
# SSR is the sum of squared residuals (the sum of squared differences
# between observed and predicted values)
ssr <- sum((supply_chain_test$Costs - predictions)^2)
print(paste("SSR =", sprintf(ssr, fmt = "%#.4f")))
##### SST ----
# SST is the total sum of squares (the sum of squared differences
# between observed values and their mean)
sst <- sum((supply_chain_test$Costs - mean(supply_chain_test$Costs))^2)
print(paste("SST =", sprintf(sst, fmt = "%#.4f")))
##### R Squared ----
# We then use SSR and SST to compute the value of R squared.
# The closer the R squared value is to 1, the better the model.
r_squared <- 1 - (ssr / sst)
print(paste("R Squared =", sprintf(r_squared, fmt = "%#.4f")))
##### MAE ----
# MAE is expressed in the same units as the target variable, making it easy to
# interpret. For example, if you are predicting the amount paid in rent,
# and the MAE is KES. 10,000, it means, on average, your model's predictions
# are off by about KES. 10,000.
absolute_errors <- abs(predictions - supply_chain_test$Costs)
mae <- mean(absolute_errors)
print(paste("MAE =", sprintf(mae, fmt = "%#.4f")))
## RRF ----
if (require("RRF")) {
require("RRF")
} else {
install.packages("RRF", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
#### Load and split the dataset ----
library(readr)
supply_chain <- read_csv(
"data/supply_chain.csv")
dataset <- supply_chain
supply_chain_independent_variables <- dataset[, 1:60]
supply_chain_dependent_variables <- dataset[,  -c(1, 2, 7, 12, 14, 15, 20, 22, 23)]
supply_chain_independent_variables <- dataset[, c(3, 4, 5, 6, 8, 9, 10, 11, 13, 15, 16, 17, 18, 19, 21)]
seed <- 7
metric <- "Accuracy"
train_control <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
set.seed(seed)
mtry <- sqrt(ncol(supply_chain_independent_variables))
tunegrid <- expand.grid(.mtry = mtry)
supply_chain_model_default_rf <- train(Costs ~ ., data = dataset, method = "rf",
metric = metric,
# enables us to maintain mtry at a constant
tuneGrid = tunegrid,
trControl = train_control)
supply_chain_model_default_rf <- train(`Customer demographics` ~ ., data = dataset, method = "rf",
metric = metric,
# enables us to maintain mtry at a constant
tuneGrid = tunegrid,
trControl = train_control)
print(supply_chain_model_default_rf)
train_control <- trainControl(method = "repeatedcv", number = 10, repeats = 3,
search = "random")
set.seed(seed)
mtry <- sqrt(ncol(supply_chain_independent_variables))
supply_chain_model_random_search_rf <- train(`Customer demographics` ~ ., data = dataset, method = "rf",
metric = metric,
# enables us to randomly search 12 options
# for the value of mtry
tuneLength = 12,
trControl = train_control)
print(supply_chain_model_random_search_rf)
## plumber ----
if (require("plumber")) {
require("plumber")
} else {
install.packages("plumber", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
saveRDS(supply_chain_model_lm, "./models/saved_supply_chain_model_lm.rds")
# This requires the "plumber" package that was installed and loaded earlier in
# STEP 1. The commenting below makes R recognize the code as the definition of
# an API, i.e., #* comments.
loaded_supply_chain_model_lm <- readRDS("./models/saved_supply_chain_model_lm.rds")
# Make a prediction based on the data frame
predict(loaded_supply_chain_model_lm, to_be_predicted)
predict_Supplier_name <-
function(arg_Location, arg_Supplier_name, arg_Costs ) {
# Create a data frame using the arguments
to_be_predicted <-
data.frame(Location = as.numeric(arg_Location),
Costs = as.numeric(arg_Costs),
arg_Supplier_name <- "Supplier name",
)
# Make a prediction based on the data frame
predict(loaded_supply_chain_model_lm, to_be_predicted)
}
# Create a data frame using the arguments
to_be_predicted <-
data.frame(Location = as.numeric(arg_Location),
Costs = as.numeric(arg_Costs),
arg_Supplier_name <- "Supplier name",
)
# A. Linear Algorithms ----
## 1. Linear Regression ----
#### Load and split the dataset ----
library(readr)
supply_chain <- read_csv(
"data/supply_chain.csv")
# Create a data frame using the arguments
to_be_predicted <-
data.frame(Location = as.numeric(arg_Location),
Costs = as.numeric(arg_Costs),
arg_Supplier_name <- "Supplier name",
)
# Create a data frame using the arguments
to_be_predicted <-
data.frame(Location = as.numeric(arg_Location),
Costs = as.numeric(arg_Costs),
arg_Supplier_name <- "Supplier name",
)
# Make a prediction based on the data frame
predict(loaded_supply_chain_model_lm, to_be_predicted)
# This requires the "plumber" package that was installed and loaded earlier in
# STEP 1. The commenting below makes R recognize the code as the definition of
# an API, i.e., #* comments.
loaded_supply_chain_model_lm <- readRDS("./models/saved_supply_chain_model_lm.rds")
predict_Supplier_name <-
function(arg_Location, arg_Supplier_name, arg_Costs ) {
# Create a data frame using the arguments
to_be_predicted <-
data.frame(Location = as.numeric(arg_Location),
Costs = as.numeric(arg_Costs),
arg_Supplier_name <- "Supplier name",
)
# Make a prediction based on the data frame
predict(loaded_supply_chain_model_lm, to_be_predicted)
}
# This requires the "plumber" package that was installed and loaded earlier in
# STEP 1. The commenting below makes R recognize the code as the definition of
# an API, i.e., #* comments.
loaded_supply_chain_model_lm <- readRDS("./models/saved_supply_chain_model_lm.rds")
predict_Supplier_name <-
function(arg_Location, arg_Supplier_name, arg_Costs ) {
# Create a data frame using the arguments
to_be_predicted <-
data.frame(Location = as.numeric(arg_Location),
Costs = as.numeric(arg_Costs),
arg_Supplier_name <- "Supplier name",
)
# Make a prediction based on the data frame
predict(loaded_supply_chain_model_lm, to_be_predicted)
}
predict_Supplier_name <-
function(arg_Location, arg_Supplier_name, arg_Costs ) {
# Create a data frame using the arguments
to_be_predicted <-
data.frame(Location = as.numeric(arg_Location),
Costs = as.numeric(arg_Costs),
arg_Supplier_name <- "Supplier name",
)
# Make a prediction based on the data frame
predict(loaded_supply_chain_model_lm, to_be_predicted)
}
# Create a data frame using the arguments
to_be_predicted <-
data.frame(Location = as.numeric(arg_Location),
Costs = as.numeric(arg_Costs),
arg_Supplier_name <- "Supplier name",
)
predict_Supplier_name <-
function(arg_Location, arg_Supplier_name, arg_Costs ) {
# Create a data frame using the arguments
to_be_predicted <-
data.frame(Location = as.numeric(arg_Location),
Costs = as.numeric(arg_Costs),
arg_Supplier_name <- "Supplier name",
)
# Make a prediction based on the data frame
predict(loaded_supply_chain_model_lm, to_be_predicted)
}
predict_diabetes <-
function(arg_pregnant, arg_glucose, arg_pressure, arg_triceps, arg_insulin,
arg_mass, arg_pedigree, arg_age) {
# Create a data frame using the arguments
to_be_predicted <-
data.frame(pregnant = as.numeric(arg_pregnant),
glucose = as.numeric(arg_glucose),
pressure = as.numeric(arg_pressure),
triceps = as.numeric(arg_triceps),
insulin = as.numeric(arg_insulin),
mass = as.numeric(arg_mass),
pedigree = as.numeric(arg_pedigree),
age = as.numeric(arg_age))
# Make a prediction based on the data frame
predict(loaded_diabetes_model_lda, to_be_predicted)
}
# Create a data frame using the arguments
to_be_predicted <-
data.frame(pregnant = as.numeric(arg_pregnant),
glucose = as.numeric(arg_glucose),
pressure = as.numeric(arg_pressure),
triceps = as.numeric(arg_triceps),
insulin = as.numeric(arg_insulin),
mass = as.numeric(arg_mass),
pedigree = as.numeric(arg_pedigree),
age = as.numeric(arg_age))
# STEP 2. Process a Plumber API ----
# This allows us to process a plumber API
api <- plumber::plumb("Lab12-PlumberAPI.R")
# STEP 1. Install and load the required packages ----
## plumber ----
if (require("plumber")) {
require("plumber")
} else {
install.packages("plumber", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
## plumber ----
if (require("plumber")) {
require("plumber")
} else {
install.packages("plumber", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
# STEP 2. Process a Plumber API ----
# This allows us to process a plumber API
api <- plumber::plumb("Lab12-PlumberAPI.R")
# Consider a library as the location where packages are stored.
# Execute the following command to list all the libraries available in your
# computer:
.libPaths()
# Then execute the following command to see which packages are available in
# each library:
lapply(.libPaths(), list.files)
if (require("languageserver")) {
require("languageserver")
} else {
install.packages("languageserver", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
# STEP 1. Install and load the required packages ----
## plumber ----
if (require("plumber")) {
require("plumber")
} else {
install.packages("plumber", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
# STEP 2. Process a Plumber API ----
# This allows us to process a plumber API
api <- plumber::plumb("Lab12-PlumberAPI.R")
# STEP 3. Run the API on a specific port ----
# Specify a constant localhost port to use
api$run(host = "127.0.0.1", port = 5022)
## caret ----
if (require("caret")) {
require("caret")
} else {
install.packages("caret", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
# STEP 1. Install and load the required packages ----
## plumber ----
if (require("plumber")) {
require("plumber")
} else {
install.packages("plumber", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
# STEP 2. Process a Plumber API ----
# This allows us to process a plumber API
api <- plumber::plumb("Lab12-PlumberAPI.R")
# STEP 2. Process a Plumber API ----
# This allows us to process a plumber API
api <- plumber::plumb("Lab12-PlumberAPI.R")
# STEP 3. Run the API on a specific port ----
# Specify a constant localhost port to use
api$run(host = "127.0.0.1", port = 5022)
# Create a data frame using the arguments
to_be_predicted <-
data.frame(arg_Location <- "Location",
Costs = as.numeric(arg_Costs),
arg_Supplier_name <- "Supplier name",
)
# Create a data frame using the arguments
to_be_predicted <-
data.frame(arg_Location <- "Location",
arg_Costs <- "Costs",
arg_Supplier_name <- "Supplier name",
)
